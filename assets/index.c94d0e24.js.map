{"version":3,"file":"index.c94d0e24.js","sources":["../../../vite/modulepreload-polyfill","../../../src/helpers/getAllXs.ts","../../../src/helpers/create2DArray.ts","../../../src/matrix/matrixUsingEigen.ts","../../../src/smoothingSpline/createBasis.ts","../../../src/helpers/pos.ts","../../../src/helpers/getAllYs.ts","../../../src/smoothingSpline/solveForBeta.ts","../../../src/smoothingSpline/generateSmoothingSplineFunction.ts","../../../src/index.ts","../../../src/cubicSpline/generateCubicSplineFunction.ts","../../store/store.js","../../data/moarData.ts","../../store/createStore.js","../../helpers/plot.js","../../helpers/handleInputChange.js","../../main.js","../../helpers/getAllData.js","../../helpers/onReady.js"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","import { Point } from \"../types\";\n\n// given collection of {x, y} points, get all x values\nconst getAllXs = (pts: Point[]): number[] => pts.map((pt) => pt.x);\n\nexport default getAllXs;\n","// create an rows x cols array with zeros\nconst create2DArray = (\n  rows: number,\n  cols: number,\n  initialValue = 0\n): number[][] => {\n  const arr = [];\n  for (let i = 0; i < rows; i++) {\n    const row = [];\n    for (let j = 0; j < cols; j++) {\n      row.push(initialValue);\n    }\n    arr.push(row);\n  }\n  return arr;\n\n  // return new Array(rows).map(() => new Array(cols).fill(initialValue));\n};\n\nexport default create2DArray;\n","import eigen from \"eigen\";\nimport create2DArray from \"../helpers/create2DArray\";\nimport {\n  MatrixLike,\n  MatrixMapperFunction,\n  SingleValueDecomposition,\n} from \"../types\";\n\ntype EigenMatrixType = eigen.Matrix;\n\n// class EigenMatrix extends eigen.Matrix {}\n\nfunction eigenMatrixToArray(M: EigenMatrixType): number[][] {\n  // TODO: Find if there's a more built-in approach to\n  // converting an eigen matrix to an array.\n  const arr = [];\n  for (let i = 0; i < M.rows(); i++) {\n    const row = [];\n    for (let j = 0; j < M.cols(); j++) {\n      row.push(M.get(i, j));\n    }\n    arr.push(row);\n  }\n  return arr;\n}\n\n// See: http://pillowlab.princeton.edu/teaching/statneuro2018/slides/notes02_SVD.pdf\ninterface EigenSVD {\n  // leftSingular\n  U: EigenMatrixType;\n  sv: EigenMatrixType;\n  // rightSingular\n  V: EigenMatrixType;\n}\n\nexport default class Matrix implements MatrixLike<Matrix> {\n  // EigenMatrix ops are async so we cannot create _eigenMatrix\n  // in the constructor. If we're given an array, we'll store it\n  // in _data and create the matrix when we do our first operation.\n  _data: number[][] = [[]];\n  // _eigenMatrix: EigenMatrix | null = null;\n  _eigenMatrix: EigenMatrixType | null = null;\n  _svd: EigenSVD | null = null;\n  _svdIsDirty: boolean = true;\n  rows: number = 0;\n  cols: number = 0;\n\n  constructor(\n    data: number[][] | EigenMatrixType | Matrix | number,\n    numCols?: number\n  ) {\n    // if data is a number, it's the number of rows\n    // and we'll create a matrix of that size\n    if (typeof data === \"number\") {\n      this._data = create2DArray(data, numCols || data);\n      this.rows = data;\n      this.cols = numCols || data;\n      return;\n    }\n\n    // if data is a 2D array, we'll put it in temp data\n    // and create the eigen matrix when we do our first op\n    if (Array.isArray(data)) {\n      this._data = data;\n      this.rows = data.length;\n      this.cols = data[0].length;\n      return;\n    }\n\n    // if data is an eigen matrix, we'll just use it\n    if (data instanceof eigen.Matrix) {\n      this._data = eigenMatrixToArray(data);\n      this._eigenMatrix = data;\n      this.rows = data.rows();\n      this.cols = data.cols();\n      return;\n    }\n\n    // if this is a matrix, let's just copy the existing state\n    if (data instanceof Matrix && data._eigenMatrix) {\n      this._eigenMatrix = data._eigenMatrix;\n      this._data = data._data;\n      this.rows = data.rows;\n      this.cols = data.cols;\n      return;\n    }\n  }\n\n  async _getEigenMatrix(): Promise<EigenMatrixType> {\n    if (this._eigenMatrix) return this._eigenMatrix;\n    if (!this._eigenMatrix && !this._data) {\n      throw Error(\"Cannot get this EigenMatrix: No _eigenMatrix or _data\");\n    }\n\n    await eigen.ready;\n    this._eigenMatrix = new eigen.Matrix(this._data);\n    return this._eigenMatrix;\n  }\n\n  async _getSVD(): Promise<EigenSVD> {\n    if (this._svd && !this._svdIsDirty) return this._svd;\n\n    // if no SVD exists, calculate it\n    const M = await this._getEigenMatrix();\n    this._svd = eigen.Decompositions.svd(M, true);\n    this._svdIsDirty = false;\n    return this._svd;\n  }\n\n  get(row: number, col: number): number {\n    return this._data[row][col];\n  }\n\n  set(row: number, col: number, value: number): void {\n    this._data[row][col] = value;\n\n    // update eigenMatrix if it exists\n    if (this._eigenMatrix) {\n      this._eigenMatrix.set(row, col, value);\n    }\n\n    // mark the SVD as needing update\n    // ugh. I hate this. Let's get rid of mutability?\n    if (this._svd) {\n      this._svdIsDirty = true;\n    }\n  }\n\n  map(fn: MatrixMapperFunction): Promise<Matrix> {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  async transpose(): Promise<Matrix> {\n    const M = await this._getEigenMatrix();\n    return new Matrix(M.transpose());\n  }\n\n  async determinant(): Promise<number> {\n    const M = await this._getEigenMatrix();\n    return M.det();\n  }\n\n  async inverse(useSVD = true): Promise<Matrix> {\n    if (!useSVD) {\n      const M = await this._getEigenMatrix();\n      return new Matrix(M.inverse());\n    }\n\n    // see this excellent description of SVDecomposition:\n    // https://pillowlab.princeton.edu/teaching/statneuro2018/slides/notes02_SVD.pdf\n\n    // In short, to find A^-1, we do:\n    // A^-1 = V * S^-1 * U^T\n    // where S^-1 = [[1/sv{0}, 0...], [0, 1/sv{1}...], ...]\n\n    // U  is the left singular matrix\n    // sv is the vector of sigma values\n    // V  is the right singular matrix\n    const { U, sv, V } = await this._getSVD();\n\n    const Ut = U.transpose();\n\n    // find the reciprocal of each sigma\n    // if signma === 0, we do the pseudo inverse\n    // that is instead of taking the reciprocal a sigma,\n    // (which would give a divide by zero error), we just\n    // leave it as 0\n    const sigmaVector: number[] = eigenMatrixToArray(sv).flat();\n    const sigmaInvVector = new eigen.Matrix(\n      sigmaVector.map((sigma) => (sigma ? 1 / sigma : 0))\n    );\n\n    // now turn that vector into a matrix of sigma inverse values\n    // fill in 0's for the rest\n    const sigmaInverseMatrix = new eigen.Matrix(V.cols(), Ut.rows());\n    sigmaInverseMatrix.setBlock(0, 0, eigen.Matrix.diagonal(sigmaInvVector));\n    const Ainv = V.matMul(sigmaInverseMatrix).matMul(Ut);\n    return new Matrix(Ainv);\n  }\n\n  // creates a diagonal matrix of rows x cols. Fills in diagonal with\n  // the values in the vector. The remaining values are 0.\n  static async diagonal(vector: number[], rows?: number, columns?: number) {\n    await eigen.ready;\n    const diag = eigen.Matrix.diagonal(new eigen.Matrix(vector));\n    if (!rows || !columns) return new Matrix(diag);\n\n    // if we have a specified number of rows and columns,\n    // we need to create a matrix of that size\n    const M = new eigen.Matrix(rows, columns);\n    M.setBlock(0, 0, diag);\n    return new Matrix(M);\n  }\n\n  async multiply(matrix: Matrix): Promise<Matrix> {\n    if (this.cols !== matrix.rows) {\n      throw Error(\n        `Cannot multiply matrices: cols of left matrix (${this.rows}x${this.cols}) must equal rows of right matrix (${matrix.rows}x${matrix.cols}).`\n      );\n    }\n    const M = await this._getEigenMatrix();\n    const N = await matrix._getEigenMatrix();\n    return new Matrix(M.matMul(N));\n  }\n\n  async multiplyScalar(scalar: number): Promise<Matrix> {\n    const M = await this._getEigenMatrix();\n    return new Matrix(M.mul(scalar));\n  }\n\n  async add(matrix: Matrix): Promise<Matrix> {\n    const M = await this._getEigenMatrix();\n    const N = await matrix._getEigenMatrix();\n    return new Matrix(M.matAdd(N));\n  }\n\n  static identity(size: number, scalar: number = 1): Promise<Matrix> {\n    const ident = create2DArray(size, size);\n    for (let i = 0; i < size; i++) {\n      ident[i][i] = scalar;\n    }\n    return Promise.resolve(new Matrix(ident));\n  }\n\n  static zero(rows: number, cols: number): Promise<Matrix> {\n    const zeros = create2DArray(rows, cols);\n    return Promise.resolve(new Matrix(zeros));\n  }\n\n  toArray(): number[][] {\n    return this._data;\n  }\n\n  async toSVD(): Promise<SingleValueDecomposition<Matrix>> {\n    const { U, sv, V } = await this._getSVD();\n    return {\n      U: new Matrix(U),\n      sigmaVector: eigenMatrixToArray(sv).flat(),\n      V: new Matrix(V),\n    };\n  }\n\n  solve(): Promise<Matrix> {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  static _flushMemory(): void {\n    eigen.GC.flush();\n  }\n}\n","import { Point } from \"../types\";\nimport getAllXs from \"../helpers/getAllXs\";\nimport pos from \"../helpers/pos\";\nimport Matrix from \"../matrix/index\";\n\nexport const createBasisArray = (x: number, data: Point[]): number[] => [\n  1,\n  x,\n  x ** 2,\n  x ** 3,\n  ...getAllXs(data).map((x_k) => pos(x - x_k) ** 3),\n];\n\n/**\n * creates a column vector of the spline\n * basis function, transpose([1 x x^2 x^3 ...])\n * To be used to beta coefficients to generate\n * the full spline\n */\nexport const createBasisCol = (x: number, data: Point[]): Promise<Matrix> =>\n  new Promise((resolve) => {\n    const M = new Matrix([createBasisArray(x, data)]).transpose();\n    resolve(M);\n  });\n\n/**\n * creates a matrix, X, of basis functions\n * using x values from our data set.\n * We'll need this when solving for betas.\n */\nexport const createBasisMatrix = async (data: Point[]): Promise<Matrix> => {\n  const X = await Promise.all([\n    ...getAllXs(data).map((x) => createBasisArray(x, data)),\n  ]);\n  return new Matrix(X);\n};\n","// Positive or 0. Needed in basis functions\nconst pos = (val: number): number => Math.max(val, 0);\n\nexport default pos;\n","import { Point } from \"../types\";\n\n// given collection of {x, y} points, get all y values\nconst getAllYs = (pts: Point[]): number[] => pts.map((pt) => pt.y);\n\nexport default getAllYs;\n","import Matrix from \"../matrix/index\";\nimport { createBasisMatrix } from \"./createBasis\";\nimport getAllYs from \"../helpers/getAllYs\";\nimport { Point } from \"../types\";\n\n/**\n * smoothingSpline uses Ridge regression to find the smoothing spline\n * that balance the fit of the data with smoothness of the curve\n *\n * The solution for β̂ can be found with:\n *  β̂ = (transpose(X) * X + λ*I)^-1\n *       * transpose(X) * y\n *\n * See: https://online.stat.psu.edu/stat857/node/155/\n */\n\n/**\n * Naive approach to using Ridge Regression\n * Can be pretty unstable, but also can be fast.\n */\n\nexport async function solveForBetasNaive(\n  data: Point[],\n  lambda: number\n): Promise<number[]> {\n  const X = await createBasisMatrix(data);\n  const yRow = new Matrix([getAllYs(data)]);\n  const [y, Xtrans, λI] = await Promise.all([\n    yRow.transpose(),\n    X.transpose(),\n    Matrix.identity(X.cols, lambda),\n  ]);\n\n  // transpose(M) * M + λ*I\n  const XtX = await Xtrans.multiply(X);\n  const inner = await XtX.add(λI);\n  const [innerInv, XtY] = await Promise.all([\n    inner.inverse(),\n    Xtrans.multiply(y),\n  ]);\n  const betas = await innerInv.multiply(XtY);\n\n  // clean up memory\n  Matrix._flushMemory();\n\n  return betas.toArray().flat();\n}\n// betas = V(S^2 + λI)^-1 * S * U' * y\n// see: https://www.cs.ubc.ca/~murphyk/Teaching/CS540-Fall08/L5.pdf\nexport async function solveForBetasWithSVD(data: Point[], lambda: number) {\n  // If X = U*S*V^T, the singular value decomposition of the X matrix\n  // and y = the vector of y values for given x's\n  // and U' is the transpose of U, then we can calcuate betas as:\n  //     betas = V * (S^2 + λI)^{−1} S*U'*y\n\n  const X = await createBasisMatrix(data);\n  const y = await new Matrix([getAllYs(data)]).transpose();\n\n  // calculate the SVD decomposition of X\n  const { U, sigmaVector, V } = await X.toSVD();\n\n  // (S^2 + λI)^{-1}\n  // S^2 and λI are both diagonal matrices, so we just add the vectors\n  // together. Additionally, inverse of a diagonal matrix is just the\n  // reciprocal of the diagonal.\n  // In the case where (S^2 + λI) === 0, we can't invert, so we just\n  // set the inverse to 0.\n  const innerInverse = sigmaVector.map((s) => {\n    const s2pluslambda = s * s + lambda;\n    return s2pluslambda === 0 ? 0 : 1 / s2pluslambda;\n  });\n\n  // now turns this vector into a matrix\n  const [innerInv, Utrans, S] = await Promise.all([\n    Matrix.diagonal(innerInverse),\n    U.transpose(),\n    Matrix.diagonal(sigmaVector),\n  ]);\n\n  // betas = V * (S^2 + λI)^{−1} S*U'*y\n  //       = V * inner * U' * y\n  const betas = await V.multiply(innerInv)\n    .then((res) => res.multiply(S))\n    .then((res) => res.multiply(Utrans))\n    .then((res) => res.multiply(y));\n\n  // clean up memory\n  Matrix._flushMemory();\n  return betas.toArray().flat();\n}\n\nexport default solveForBetasWithSVD;\n","import { Point, SplineFunction } from \"../types\";\nimport { createBasisArray, createBasisCol } from \"./createBasis\";\nimport solveForBetas from \"./solveForBeta\";\n\nclass InvalidLambdaError extends Error {}\n\nexport default async function generateSmoothingSplineFunction(\n  data: Point[],\n  { lambda }: { lambda: number }\n): Promise<SplineFunction> {\n  if (lambda <= 0) {\n    throw new InvalidLambdaError(\"lambda must be greater than 0\");\n  }\n  // the coefficients of our spline\n  const betas: number[] = await solveForBetas(data, lambda);\n\n  // the function that can generate a spline's y\n  // from a given x.\n  const splineFn = (x: number): number => {\n    const basis: number[] = createBasisArray(x, data);\n    // dot product betasArray and basisArray\n    return betas.reduce((acc, beta, i) => (acc += beta * basis[i]), 0);\n  };\n\n  return splineFn;\n}\n","import generateSmoothingSplineFunction from \"./smoothingSpline/generateSmoothingSplineFunction\";\nimport generateCubicSplineFunction from \"./cubicSpline/generateCubicSplineFunction\";\nimport getAllXs from \"./helpers/getAllXs\";\nimport { Point, SplineFunction } from \"./types\";\n\n// shim global\nimport shim from 'globalthis/shim'; \nshim();\n\nasync function generateSplinePoints(\n  splineFn: (x: number) => number,\n  data: Point[]\n) {\n  const minX = Math.min(...getAllXs(data));\n  const maxX = Math.max(...getAllXs(data));\n  const stepSize = (maxX - minX) / 1000;\n\n  const xs = [...Array(1000).keys()].map((i) => minX + i * stepSize);\n  const splinePoints = await Promise.all([\n    ...xs.map((x) => ({ x, y: splineFn(x) })),\n  ]);\n\n  return splinePoints;\n}\n\ninterface smoothingSplineOptions {\n  lambda?: number;\n  type?: \"smoothing\" | \"cubic\";\n}\n\ninterface SmoothingSpline {\n  fn: SplineFunction;\n  points: Point[];\n}\n\nexport default async function smoothingSpline(\n  data: Point[],\n  { lambda = 1000, type = \"smoothing\" }: smoothingSplineOptions = {}\n): Promise<SmoothingSpline> {\n  let splineFn: SplineFunction;\n\n  if (type === \"cubic\") {\n    splineFn = await generateCubicSplineFunction(data);\n  } else {\n    splineFn = await generateSmoothingSplineFunction(data, { lambda });\n  }\n\n  const splinePoints = await generateSplinePoints(splineFn, data);\n  return {\n    fn: splineFn,\n    points: splinePoints,\n  };\n}\n","import Matrix from \"../matrix/index\";\nimport getAllXs from \"../helpers/getAllXs\";\nimport getAllYs from \"../helpers/getAllYs\";\nimport { Point, SplineFunction } from \"../types\";\n\n/**\n * Finds the coeffs of a cubic function that best fits the given data points\n * b0 + b1*x0 + b2*x0^2 + b3*x0^3 = y0\n * b0 + b1*x1 + b2*x1^2 + b3*x1^3 = y1\n * ...\n * b0 + b1*x{n-1} + b2*x{n-1}^2 + b3*x{n-1}^3 = y{n-1}\n *\n * such that we minimizes the sum of the squared distances\n *\n * betas = (X'*X)^-1 * X' * y\n *\n * Where X is a the basis matrix\n *  [[1, x0, x0^2, x0^3 ]\n *   [1, x1, x1^2, x1^3]\n *   ...\n *   [1, x{n-1}, x{n-1}^2, x{n-1}^3]]\n *\n * X' is the transpose of X\n * and y is the vector of y values\n *\n * See: https://en.wikipedia.org/wiki/Polynomial_regression\n */\n\nexport default async (data: Point[]): Promise<SplineFunction> => {\n  const xs = getAllXs(data);\n  const ys = getAllYs(data);\n\n  const basisMatrix = new Matrix(xs.map((x) => [1, x, x ** 2, x ** 3]));\n  const transposedBasisMatrix = await basisMatrix.transpose();\n  const Y = await new Matrix([ys]).transpose();\n\n  //betas = (X'*X)^-1 * X' * y\n  const betas: number[] = await transposedBasisMatrix\n    .multiply(basisMatrix)\n    .then((M) => M.inverse())\n    .then((M) => M.multiply(transposedBasisMatrix))\n    .then((M) => M.multiply(Y))\n    .then((M) => M.toArray().flat());\n\n  // spline function is b0 + b1*x + b2*x^2 + b3*x^3\n  return (x: number): number => {\n    const basis = [1, x, x ** 2, x ** 3];\n    return betas.reduce((acc, beta, i) => acc + beta * basis[i], 0);\n  };\n};\n","// import { getPoints } from \"../../src/helpers/randomData\";\nimport moarData from \"../data/moarData\";\nimport { createStore } from \"./createStore.js\";\n\nexport const INPUT_CHANGE = \"INPUT_CHANGE\";\n\n// const randomData = getPoints(400);\n// console.log({ randomData });\n\n// this holds the initial state of our application\n// we load in two data sets and set a default lambda\nlet initialState = {\n  data: {\n    // randomData: getPoints(400),\n    moarData,\n  },\n  lambda: 1,\n};\n\n// this function processes any actions from the UI\n// updating the store's state. The store will run\n// any listeners once it state changes.\nfunction rootReducer(state = initialState, action) {\n  switch (action.type) {\n    case INPUT_CHANGE:\n      return { ...state, lambda: action.payload };\n    default:\n      return state;\n  }\n}\n\n// a redux-style store for holding our app data\nconst store = createStore(rootReducer);\n\nexport default store;\n","const data: { x: number; y: number }[] = [\r\n  {\r\n    x: 1454,\r\n    y: 0.559780219194249,\r\n  },\r\n  {\r\n    x: 1455,\r\n    y: 0.5251772510820012,\r\n  },\r\n  {\r\n    x: 1456,\r\n    y: 0.4547149919128769,\r\n  },\r\n  {\r\n    x: 1457,\r\n    y: 0.5992332373706969,\r\n  },\r\n  {\r\n    x: 1458,\r\n    y: 0.23687104322058528,\r\n  },\r\n  {\r\n    x: 1459,\r\n    y: 0.47901865525997755,\r\n  },\r\n  {\r\n    x: 1460,\r\n    y: 0.6048858102575609,\r\n  },\r\n  {\r\n    x: 1461,\r\n    y: 0.45323832170096734,\r\n  },\r\n  {\r\n    x: 1462,\r\n    y: 0.5903007401651968,\r\n  },\r\n  {\r\n    x: 1463,\r\n    y: 0.4640738370797929,\r\n  },\r\n  {\r\n    x: 1464,\r\n    y: 0.5898055213362775,\r\n  },\r\n  {\r\n    x: 1465,\r\n    y: 0.5278469797878472,\r\n  },\r\n  {\r\n    x: 1466,\r\n    y: 0.38466879970967943,\r\n  },\r\n  {\r\n    x: 1467,\r\n    y: 0.4189396690978066,\r\n  },\r\n  {\r\n    x: 1468,\r\n    y: 0.42739850156948156,\r\n  },\r\n  {\r\n    x: 1469,\r\n    y: 0.4084774911352119,\r\n  },\r\n  {\r\n    x: 1470,\r\n    y: 0.423211797546553,\r\n  },\r\n  {\r\n    x: 1471,\r\n    y: 0.5001141297167556,\r\n  },\r\n  {\r\n    x: 1472,\r\n    y: 0.18808274431337937,\r\n  },\r\n  {\r\n    x: 1473,\r\n    y: 0.22238652703004594,\r\n  },\r\n  {\r\n    x: 1474,\r\n    y: 0.346180224804763,\r\n  },\r\n  {\r\n    x: 1475,\r\n    y: 0.3548038157638943,\r\n  },\r\n  {\r\n    x: 1476,\r\n    y: 0.34418295094079543,\r\n  },\r\n  {\r\n    x: 1477,\r\n    y: 0.33553132436860744,\r\n  },\r\n  {\r\n    x: 1478,\r\n    y: 0.3590315888446268,\r\n  },\r\n  {\r\n    x: 1479,\r\n    y: 0.5369373693665318,\r\n  },\r\n  {\r\n    x: 1480,\r\n    y: 0.3955291136898741,\r\n  },\r\n  {\r\n    x: 1481,\r\n    y: 0.5658611603182934,\r\n  },\r\n  {\r\n    x: 1482,\r\n    y: 0.39880429331348155,\r\n  },\r\n  {\r\n    x: 1483,\r\n    y: 0.36307058768207195,\r\n  },\r\n  {\r\n    x: 1484,\r\n    y: 0.43878489334854404,\r\n  },\r\n  {\r\n    x: 1485,\r\n    y: 0.5119895267451366,\r\n  },\r\n  {\r\n    x: 1486,\r\n    y: 0.465278060557762,\r\n  },\r\n  {\r\n    x: 1487,\r\n    y: 0.4965817242414045,\r\n  },\r\n  {\r\n    x: 1488,\r\n    y: 0.543623105771903,\r\n  },\r\n  {\r\n    x: 1489,\r\n    y: 0.6718018466563381,\r\n  },\r\n  {\r\n    x: 1490,\r\n    y: 0.5079607619441652,\r\n  },\r\n  {\r\n    x: 1491,\r\n    y: 0.4477555152496062,\r\n  },\r\n  {\r\n    x: 1492,\r\n    y: 0.47006712399111017,\r\n  },\r\n  {\r\n    x: 1493,\r\n    y: 0.10995763391718595,\r\n  },\r\n  {\r\n    x: 1494,\r\n    y: 0.4732200875744461,\r\n  },\r\n  {\r\n    x: 1495,\r\n    y: 0.5271691614633683,\r\n  },\r\n  {\r\n    x: 1496,\r\n    y: 0.48329941423524314,\r\n  },\r\n  {\r\n    x: 1497,\r\n    y: 0.4480560849284772,\r\n  },\r\n  {\r\n    x: 1498,\r\n    y: 0.5524775019557698,\r\n  },\r\n  {\r\n    x: 1499,\r\n    y: 0.4972162995177248,\r\n  },\r\n  {\r\n    x: 1500,\r\n    y: 0.5392632831837573,\r\n  },\r\n  {\r\n    x: 1501,\r\n    y: 0.6255410139452724,\r\n  },\r\n  {\r\n    x: 1502,\r\n    y: 0.6867489455778724,\r\n  },\r\n  {\r\n    x: 1503,\r\n    y: 0.4113455983190817,\r\n  },\r\n  {\r\n    x: 1504,\r\n    y: 0.6763082116434688,\r\n  },\r\n  {\r\n    x: 1505,\r\n    y: 0.4493331151546783,\r\n  },\r\n  {\r\n    x: 1506,\r\n    y: 0.5982630142532026,\r\n  },\r\n  {\r\n    x: 1507,\r\n    y: 0.6507088095271255,\r\n  },\r\n  {\r\n    x: 1508,\r\n    y: 0.6266577186992769,\r\n  },\r\n  {\r\n    x: 1509,\r\n    y: 0.6394924685122966,\r\n  },\r\n  {\r\n    x: 1510,\r\n    y: 0.7740825151296089,\r\n  },\r\n  {\r\n    x: 1511,\r\n    y: 0.6392461054359819,\r\n  },\r\n  {\r\n    x: 1512,\r\n    y: 0.7272997059659763,\r\n  },\r\n  {\r\n    x: 1513,\r\n    y: 0.7698982147092509,\r\n  },\r\n  {\r\n    x: 1514,\r\n    y: 0.45110273891629565,\r\n  },\r\n  {\r\n    x: 1515,\r\n    y: 0.6940498550223054,\r\n  },\r\n  {\r\n    x: 1516,\r\n    y: 0.47558937986096816,\r\n  },\r\n  {\r\n    x: 1517,\r\n    y: 0.6097086591055098,\r\n  },\r\n  {\r\n    x: 1518,\r\n    y: 0.3553422130486797,\r\n  },\r\n  {\r\n    x: 1519,\r\n    y: 0.5426382913964408,\r\n  },\r\n  {\r\n    x: 1520,\r\n    y: 0.2073640612480615,\r\n  },\r\n  {\r\n    x: 1521,\r\n    y: 0.44575742941556573,\r\n  },\r\n  {\r\n    x: 1522,\r\n    y: 0.5732233380207595,\r\n  },\r\n  {\r\n    x: 1523,\r\n    y: 0.5052910565143724,\r\n  },\r\n  {\r\n    x: 1524,\r\n    y: 0.5114386653005228,\r\n  },\r\n  {\r\n    x: 1525,\r\n    y: 0.418066899900905,\r\n  },\r\n  {\r\n    x: 1526,\r\n    y: 0.37040461161025034,\r\n  },\r\n  {\r\n    x: 1527,\r\n    y: 0.6226203877737476,\r\n  },\r\n  {\r\n    x: 1528,\r\n    y: 0.27818018190044075,\r\n  },\r\n  {\r\n    x: 1529,\r\n    y: 0.1735511073164216,\r\n  },\r\n  {\r\n    x: 1530,\r\n    y: 0.36167731331446445,\r\n  },\r\n  {\r\n    x: 1531,\r\n    y: 0.4986147450159488,\r\n  },\r\n  {\r\n    x: 1532,\r\n    y: 0.5269825788962597,\r\n  },\r\n  {\r\n    x: 1533,\r\n    y: 0.47968281119869505,\r\n  },\r\n  {\r\n    x: 1534,\r\n    y: 0.3141679680728935,\r\n  },\r\n  {\r\n    x: 1535,\r\n    y: 0.3311965811965812,\r\n  },\r\n  {\r\n    x: 1536,\r\n    y: 0.1794871794871795,\r\n  },\r\n  {\r\n    x: 1537,\r\n    y: 0.21367521367521367,\r\n  },\r\n  {\r\n    x: 1538,\r\n    y: 0.2564191593895966,\r\n  },\r\n  {\r\n    x: 1539,\r\n    y: 0.3141679680728935,\r\n  },\r\n  {\r\n    x: 1540,\r\n    y: 0.37714341648557587,\r\n  },\r\n  {\r\n    x: 1541,\r\n    y: 0.31683176168274213,\r\n  },\r\n  {\r\n    x: 1542,\r\n    y: 0.40168145091243634,\r\n  },\r\n  {\r\n    x: 1543,\r\n    y: 0.39276521595273717,\r\n  },\r\n  {\r\n    x: 1544,\r\n    y: 0.4129957105390691,\r\n  },\r\n  {\r\n    x: 1545,\r\n    y: 0.49820685695208483,\r\n  },\r\n  {\r\n    x: 1546,\r\n    y: 0.43973614052383336,\r\n  },\r\n  {\r\n    x: 1547,\r\n    y: 0.29731159384632955,\r\n  },\r\n  {\r\n    x: 1548,\r\n    y: 0.47639760550489857,\r\n  },\r\n  {\r\n    x: 1549,\r\n    y: 0.34628263001507215,\r\n  },\r\n  {\r\n    x: 1550,\r\n    y: 0.2752351044568657,\r\n  },\r\n  {\r\n    x: 1551,\r\n    y: 0.2454978898474268,\r\n  },\r\n  {\r\n    x: 1552,\r\n    y: 0.5809814401371215,\r\n  },\r\n  {\r\n    x: 1553,\r\n    y: 0.44762893312449076,\r\n  },\r\n  {\r\n    x: 1554,\r\n    y: 0.6679016886068995,\r\n  },\r\n  {\r\n    x: 1555,\r\n    y: 0.5467163348774461,\r\n  },\r\n  {\r\n    x: 1556,\r\n    y: 0.5517828838761764,\r\n  },\r\n  {\r\n    x: 1557,\r\n    y: 0.38533290147066857,\r\n  },\r\n  {\r\n    x: 1558,\r\n    y: 0.5864674267698006,\r\n  },\r\n  {\r\n    x: 1559,\r\n    y: 0.752440206849829,\r\n  },\r\n  {\r\n    x: 1560,\r\n    y: 0.7011184879856894,\r\n  },\r\n  {\r\n    x: 1561,\r\n    y: 0.6640591126376244,\r\n  },\r\n  {\r\n    x: 1562,\r\n    y: 0.7918706555189147,\r\n  },\r\n  {\r\n    x: 1563,\r\n    y: 0.6086556370923123,\r\n  },\r\n  {\r\n    x: 1564,\r\n    y: 0.46193892882555054,\r\n  },\r\n  {\r\n    x: 1565,\r\n    y: 0.39399762638003794,\r\n  },\r\n  {\r\n    x: 1566,\r\n    y: 0.40252690048945694,\r\n  },\r\n  {\r\n    x: 1567,\r\n    y: 0.5174514904796726,\r\n  },\r\n  {\r\n    x: 1568,\r\n    y: 0.4980282914874643,\r\n  },\r\n  {\r\n    x: 1569,\r\n    y: 0.48886815597661026,\r\n  },\r\n  {\r\n    x: 1570,\r\n    y: 0.6107860291297487,\r\n  },\r\n  {\r\n    x: 1571,\r\n    y: 0.5502084888976381,\r\n  },\r\n  {\r\n    x: 1572,\r\n    y: 0.6246483414225644,\r\n  },\r\n  {\r\n    x: 1573,\r\n    y: 0.4178975900770928,\r\n  },\r\n  {\r\n    x: 1574,\r\n    y: 0.6152139483189168,\r\n  },\r\n  {\r\n    x: 1575,\r\n    y: 0.6022647313541306,\r\n  },\r\n  {\r\n    x: 1576,\r\n    y: 0.5868760023887946,\r\n  },\r\n  {\r\n    x: 1577,\r\n    y: 0.45184603614814317,\r\n  },\r\n  {\r\n    x: 1578,\r\n    y: 0.5462275741736586,\r\n  },\r\n  {\r\n    x: 1579,\r\n    y: 0.6176987885780316,\r\n  },\r\n  {\r\n    x: 1580,\r\n    y: 0.4867388170438434,\r\n  },\r\n  {\r\n    x: 1581,\r\n    y: 0.48711388072272516,\r\n  },\r\n  {\r\n    x: 1582,\r\n    y: 0.5881077895699253,\r\n  },\r\n  {\r\n    x: 1583,\r\n    y: 0.6390067924252277,\r\n  },\r\n  {\r\n    x: 1584,\r\n    y: 0.680078224907673,\r\n  },\r\n  {\r\n    x: 1585,\r\n    y: 0.6204423272335958,\r\n  },\r\n  {\r\n    x: 1586,\r\n    y: 0.34805455794837964,\r\n  },\r\n  {\r\n    x: 1587,\r\n    y: 0.5319955004569042,\r\n  },\r\n  {\r\n    x: 1588,\r\n    y: 0.748732705821865,\r\n  },\r\n  {\r\n    x: 1589,\r\n    y: 0.7662126212690819,\r\n  },\r\n  {\r\n    x: 1590,\r\n    y: 0.7506298035027922,\r\n  },\r\n  {\r\n    x: 1591,\r\n    y: 0.33793125168323446,\r\n  },\r\n  {\r\n    x: 1592,\r\n    y: 0.24871831585722015,\r\n  },\r\n  {\r\n    x: 1593,\r\n    y: 0.6985872482896188,\r\n  },\r\n  {\r\n    x: 1594,\r\n    y: 0.7832209505275722,\r\n  },\r\n  {\r\n    x: 1595,\r\n    y: 0.8189365646612369,\r\n  },\r\n  {\r\n    x: 1596,\r\n    y: 0.5423984419567367,\r\n  },\r\n  {\r\n    x: 1597,\r\n    y: 0.6521121076097472,\r\n  },\r\n  {\r\n    x: 1598,\r\n    y: 0.553979519924584,\r\n  },\r\n  {\r\n    x: 1599,\r\n    y: 0.5100933539525013,\r\n  },\r\n  {\r\n    x: 1600,\r\n    y: 0.8543508898903709,\r\n  },\r\n  {\r\n    x: 1601,\r\n    y: 0.4336682370399336,\r\n  },\r\n  {\r\n    x: 1602,\r\n    y: 0.49171721266827034,\r\n  },\r\n  {\r\n    x: 1603,\r\n    y: 0.6082919677447519,\r\n  },\r\n  {\r\n    x: 1604,\r\n    y: 0.41217721638946825,\r\n  },\r\n  {\r\n    x: 1605,\r\n    y: 0.34481247967443973,\r\n  },\r\n  {\r\n    x: 1606,\r\n    y: 0.2560271354281321,\r\n  },\r\n  {\r\n    x: 1607,\r\n    y: 0.2958379440211367,\r\n  },\r\n  {\r\n    x: 1608,\r\n    y: 0.40470446482563843,\r\n  },\r\n  {\r\n    x: 1609,\r\n    y: 0.44845332042204805,\r\n  },\r\n  {\r\n    x: 1610,\r\n    y: 0.1529233960263495,\r\n  },\r\n  {\r\n    x: 1611,\r\n    y: 0.5335252298318418,\r\n  },\r\n  {\r\n    x: 1612,\r\n    y: 0.3813848180365055,\r\n  },\r\n  {\r\n    x: 1613,\r\n    y: 0.40869539200017885,\r\n  },\r\n  {\r\n    x: 1614,\r\n    y: 0.47948070443698454,\r\n  },\r\n  {\r\n    x: 1615,\r\n    y: 0.291922886113645,\r\n  },\r\n  {\r\n    x: 1616,\r\n    y: 0.3770928644471772,\r\n  },\r\n  {\r\n    x: 1617,\r\n    y: 0.4439767838698152,\r\n  },\r\n  {\r\n    x: 1618,\r\n    y: 0.4026686582787355,\r\n  },\r\n  {\r\n    x: 1619,\r\n    y: 0.5546096483825732,\r\n  },\r\n  {\r\n    x: 1620,\r\n    y: 0.5606277332857306,\r\n  },\r\n  {\r\n    x: 1621,\r\n    y: 0.44922641114591105,\r\n  },\r\n  {\r\n    x: 1622,\r\n    y: 0.5516959951233449,\r\n  },\r\n  {\r\n    x: 1623,\r\n    y: 0.5690544438284519,\r\n  },\r\n  {\r\n    x: 1624,\r\n    y: 0.45958056546180626,\r\n  },\r\n  {\r\n    x: 1625,\r\n    y: 0.5431555003698298,\r\n  },\r\n  {\r\n    x: 1626,\r\n    y: 0.5196702441792947,\r\n  },\r\n  {\r\n    x: 1627,\r\n    y: 0.4329757961273847,\r\n  },\r\n  {\r\n    x: 1628,\r\n    y: 0.5654122325948704,\r\n  },\r\n  {\r\n    x: 1629,\r\n    y: 0.5846195776061948,\r\n  },\r\n  {\r\n    x: 1630,\r\n    y: 0.46054163242915946,\r\n  },\r\n  {\r\n    x: 1631,\r\n    y: 0.5533529221792164,\r\n  },\r\n  {\r\n    x: 1632,\r\n    y: 0.6077483979580185,\r\n  },\r\n  {\r\n    x: 1633,\r\n    y: 0.7744642550740701,\r\n  },\r\n  {\r\n    x: 1634,\r\n    y: 0.5942977939828947,\r\n  },\r\n  {\r\n    x: 1635,\r\n    y: 0.6190161525442011,\r\n  },\r\n  {\r\n    x: 1636,\r\n    y: 0.6077483979580031,\r\n  },\r\n  {\r\n    x: 1637,\r\n    y: 0.3628802970350666,\r\n  },\r\n  {\r\n    x: 1638,\r\n    y: 0.6882580724145865,\r\n  },\r\n  {\r\n    x: 1639,\r\n    y: 0.5542449501279277,\r\n  },\r\n  {\r\n    x: 1640,\r\n    y: 0.3484520889420807,\r\n  },\r\n  {\r\n    x: 1641,\r\n    y: 0.12409729569001371,\r\n  },\r\n  {\r\n    x: 1642,\r\n    y: 0,\r\n  },\r\n  {\r\n    x: 1643,\r\n    y: 0.3164990848082995,\r\n  },\r\n  {\r\n    x: 1644,\r\n    y: 0.5110457180246358,\r\n  },\r\n  {\r\n    x: 1645,\r\n    y: 0.4092145335196612,\r\n  },\r\n  {\r\n    x: 1646,\r\n    y: 0.4916805493235379,\r\n  },\r\n  {\r\n    x: 1647,\r\n    y: 0.5131053340103806,\r\n  },\r\n  {\r\n    x: 1648,\r\n    y: 0.571088732654933,\r\n  },\r\n  {\r\n    x: 1649,\r\n    y: 0.07490832539725686,\r\n  },\r\n  {\r\n    x: 1650,\r\n    y: 0.4798519264142974,\r\n  },\r\n  {\r\n    x: 1651,\r\n    y: 0.5538311502135751,\r\n  },\r\n  {\r\n    x: 1652,\r\n    y: 0.5328915891927928,\r\n  },\r\n  {\r\n    x: 1653,\r\n    y: 0.4343970322751982,\r\n  },\r\n  {\r\n    x: 1654,\r\n    y: 0.4839684628232756,\r\n  },\r\n  {\r\n    x: 1655,\r\n    y: 0.549847401113847,\r\n  },\r\n  {\r\n    x: 1656,\r\n    y: 0.4855131571720053,\r\n  },\r\n  {\r\n    x: 1657,\r\n    y: 0.7432243183038918,\r\n  },\r\n  {\r\n    x: 1658,\r\n    y: 0.8644132989357685,\r\n  },\r\n  {\r\n    x: 1659,\r\n    y: 0.7248913909494697,\r\n  },\r\n  {\r\n    x: 1660,\r\n    y: 0.7244724213407755,\r\n  },\r\n  {\r\n    x: 1661,\r\n    y: 0.704748542978884,\r\n  },\r\n  {\r\n    x: 1662,\r\n    y: 0.7090894526528859,\r\n  },\r\n  {\r\n    x: 1663,\r\n    y: 0.767122809256524,\r\n  },\r\n  {\r\n    x: 1664,\r\n    y: 0.6640872609696071,\r\n  },\r\n  {\r\n    x: 1665,\r\n    y: 0.6835286288988988,\r\n  },\r\n  {\r\n    x: 1666,\r\n    y: 0.6276971470017974,\r\n  },\r\n  {\r\n    x: 1667,\r\n    y: 0.3747264405773041,\r\n  },\r\n  {\r\n    x: 1668,\r\n    y: 0.5625504741925991,\r\n  },\r\n  {\r\n    x: 1669,\r\n    y: 0.4444906698512086,\r\n  },\r\n  {\r\n    x: 1670,\r\n    y: 0.34212064204487924,\r\n  },\r\n  {\r\n    x: 1671,\r\n    y: 0.28696986906144284,\r\n  },\r\n  {\r\n    x: 1672,\r\n    y: 0.4766154845481188,\r\n  },\r\n  {\r\n    x: 1673,\r\n    y: 0.32513055307554517,\r\n  },\r\n  {\r\n    x: 1674,\r\n    y: 0.5186853031597588,\r\n  },\r\n  {\r\n    x: 1675,\r\n    y: 0.6381845873538297,\r\n  },\r\n  {\r\n    x: 1676,\r\n    y: 0.5844632305622991,\r\n  },\r\n  {\r\n    x: 1677,\r\n    y: 0.5689541434057414,\r\n  },\r\n  {\r\n    x: 1678,\r\n    y: 0.4580128480446287,\r\n  },\r\n  {\r\n    x: 1679,\r\n    y: 0.43632143782670857,\r\n  },\r\n  {\r\n    x: 1680,\r\n    y: 0.3398510822801117,\r\n  },\r\n  {\r\n    x: 1681,\r\n    y: 0.39123575691454177,\r\n  },\r\n  {\r\n    x: 1682,\r\n    y: 0.5279896802884041,\r\n  },\r\n  {\r\n    x: 1683,\r\n    y: 0.45989836004339496,\r\n  },\r\n  {\r\n    x: 1684,\r\n    y: 0.4104566818867211,\r\n  },\r\n  {\r\n    x: 1685,\r\n    y: 0.42148214491308145,\r\n  },\r\n  {\r\n    x: 1686,\r\n    y: 0.5902117861552912,\r\n  },\r\n  {\r\n    x: 1687,\r\n    y: 0.4967615557250805,\r\n  },\r\n  {\r\n    x: 1688,\r\n    y: 0.844547058542665,\r\n  },\r\n  {\r\n    x: 1689,\r\n    y: 0.822718944793951,\r\n  },\r\n  {\r\n    x: 1690,\r\n    y: 0.6346477588219923,\r\n  },\r\n  {\r\n    x: 1691,\r\n    y: 0.5087669207771993,\r\n  },\r\n  {\r\n    x: 1692,\r\n    y: 0.5619820607965792,\r\n  },\r\n  {\r\n    x: 1693,\r\n    y: 0.6197502141997083,\r\n  },\r\n  {\r\n    x: 1694,\r\n    y: 0.42107572983192487,\r\n  },\r\n  {\r\n    x: 1695,\r\n    y: 0.5854700854700855,\r\n  },\r\n  {\r\n    x: 1696,\r\n    y: 0.7628324833267957,\r\n  },\r\n  {\r\n    x: 1697,\r\n    y: 0.7671059209132803,\r\n  },\r\n  {\r\n    x: 1698,\r\n    y: 0.7832180358212009,\r\n  },\r\n  {\r\n    x: 1699,\r\n    y: 0.4205658016794283,\r\n  },\r\n  {\r\n    x: 1700,\r\n    y: 0.590501804183241,\r\n  },\r\n  {\r\n    x: 1701,\r\n    y: 0.7395138316063584,\r\n  },\r\n  {\r\n    x: 1702,\r\n    y: 0.5125444413594503,\r\n  },\r\n  {\r\n    x: 1703,\r\n    y: 0.43523705632738346,\r\n  },\r\n  {\r\n    x: 1704,\r\n    y: 0.5176455700826261,\r\n  },\r\n  {\r\n    x: 1705,\r\n    y: 0.6838441455472333,\r\n  },\r\n  {\r\n    x: 1706,\r\n    y: 0.6615137531550392,\r\n  },\r\n  {\r\n    x: 1707,\r\n    y: 0.5112958103233146,\r\n  },\r\n  {\r\n    x: 1708,\r\n    y: 0.4288275753048156,\r\n  },\r\n  {\r\n    x: 1709,\r\n    y: 0.5768122717270853,\r\n  },\r\n  {\r\n    x: 1710,\r\n    y: 0.7433103168863691,\r\n  },\r\n  {\r\n    x: 1711,\r\n    y: 0.514300748295749,\r\n  },\r\n  {\r\n    x: 1712,\r\n    y: 0.4149152319676301,\r\n  },\r\n  {\r\n    x: 1713,\r\n    y: 0.4482343751662982,\r\n  },\r\n  {\r\n    x: 1714,\r\n    y: 0.808655532913088,\r\n  },\r\n  {\r\n    x: 1715,\r\n    y: 0.6644783831395321,\r\n  },\r\n  {\r\n    x: 1716,\r\n    y: 0.6144639361654841,\r\n  },\r\n  {\r\n    x: 1717,\r\n    y: 0.7173634162825195,\r\n  },\r\n  {\r\n    x: 1718,\r\n    y: 0.6372323663761882,\r\n  },\r\n  {\r\n    x: 1719,\r\n    y: 0.7057171847359369,\r\n  },\r\n  {\r\n    x: 1720,\r\n    y: 0.4174548757734599,\r\n  },\r\n  {\r\n    x: 1721,\r\n    y: 0.5588740467768323,\r\n  },\r\n  {\r\n    x: 1722,\r\n    y: 0.5006570305068369,\r\n  },\r\n  {\r\n    x: 1723,\r\n    y: 0,\r\n  },\r\n  {\r\n    x: 1724,\r\n    y: 0.5675440539693785,\r\n  },\r\n  {\r\n    x: 1725,\r\n    y: 0.4354625365256629,\r\n  },\r\n  {\r\n    x: 1726,\r\n    y: 0.46677153575771446,\r\n  },\r\n  {\r\n    x: 1727,\r\n    y: 0.3337713536712245,\r\n  },\r\n  {\r\n    x: 1728,\r\n    y: 0.37496195048886366,\r\n  },\r\n  {\r\n    x: 1729,\r\n    y: 0.4801753216718853,\r\n  },\r\n  {\r\n    x: 1730,\r\n    y: 0.5339401134092,\r\n  },\r\n  {\r\n    x: 1731,\r\n    y: 0.5113449212232463,\r\n  },\r\n  {\r\n    x: 1732,\r\n    y: 0.40976644531173056,\r\n  },\r\n  {\r\n    x: 1733,\r\n    y: 0.5059457280173719,\r\n  },\r\n  {\r\n    x: 1734,\r\n    y: 0.5617707893376856,\r\n  },\r\n  {\r\n    x: 1735,\r\n    y: 0.5957707925994964,\r\n  },\r\n  {\r\n    x: 1736,\r\n    y: 0.41170062749149877,\r\n  },\r\n  {\r\n    x: 1737,\r\n    y: 0.32669954930279105,\r\n  },\r\n  {\r\n    x: 1738,\r\n    y: 0.5255411273287651,\r\n  },\r\n  {\r\n    x: 1739,\r\n    y: 0.8053174737158824,\r\n  },\r\n  {\r\n    x: 1740,\r\n    y: 0.4928862415441455,\r\n  },\r\n  {\r\n    x: 1741,\r\n    y: 0.5384827359821636,\r\n  },\r\n  {\r\n    x: 1742,\r\n    y: 0.7149982618353996,\r\n  },\r\n  {\r\n    x: 1743,\r\n    y: 0.7111405165271314,\r\n  },\r\n  {\r\n    x: 1744,\r\n    y: 0.6644886897373111,\r\n  },\r\n  {\r\n    x: 1745,\r\n    y: 0.5801036103143006,\r\n  },\r\n  {\r\n    x: 1746,\r\n    y: 0.5754690445442949,\r\n  },\r\n  {\r\n    x: 1747,\r\n    y: 0.7878127180121549,\r\n  },\r\n  {\r\n    x: 1748,\r\n    y: 0.3566840347155119,\r\n  },\r\n  {\r\n    x: 1749,\r\n    y: 0.05878981406922053,\r\n  },\r\n  {\r\n    x: 1750,\r\n    y: 0.4479898447681753,\r\n  },\r\n  {\r\n    x: 1751,\r\n    y: 0.39353962764540584,\r\n  },\r\n  {\r\n    x: 1752,\r\n    y: 0.21162477734804705,\r\n  },\r\n  {\r\n    x: 1753,\r\n    y: 0.6473547945027255,\r\n  },\r\n  {\r\n    x: 1754,\r\n    y: 0.44988147886032176,\r\n  },\r\n  {\r\n    x: 1755,\r\n    y: 0.48737156957081385,\r\n  },\r\n  {\r\n    x: 1756,\r\n    y: 0.705493948140405,\r\n  },\r\n  {\r\n    x: 1757,\r\n    y: 0.7308379534837524,\r\n  },\r\n  {\r\n    x: 1758,\r\n    y: 0.6139175592235285,\r\n  },\r\n  {\r\n    x: 1759,\r\n    y: 0.5704968146543135,\r\n  },\r\n  {\r\n    x: 1760,\r\n    y: 0.5322057236458415,\r\n  },\r\n  {\r\n    x: 1761,\r\n    y: 0.6013391501205854,\r\n  },\r\n  {\r\n    x: 1762,\r\n    y: 0.6456245288212396,\r\n  },\r\n  {\r\n    x: 1763,\r\n    y: 0.719933281744152,\r\n  },\r\n  {\r\n    x: 1764,\r\n    y: 0.758185781330899,\r\n  },\r\n  {\r\n    x: 1765,\r\n    y: 0.9790382840936762,\r\n  },\r\n  {\r\n    x: 1766,\r\n    y: 0.4878498136464597,\r\n  },\r\n  {\r\n    x: 1767,\r\n    y: 0.65666464199147,\r\n  },\r\n  {\r\n    x: 1768,\r\n    y: 0.6070219113404356,\r\n  },\r\n  {\r\n    x: 1769,\r\n    y: 0.6628892545373911,\r\n  },\r\n  {\r\n    x: 1770,\r\n    y: 0.7163507348623736,\r\n  },\r\n  {\r\n    x: 1771,\r\n    y: 0.8219114460641931,\r\n  },\r\n  {\r\n    x: 1772,\r\n    y: 0.7866803498230535,\r\n  },\r\n  {\r\n    x: 1773,\r\n    y: 0.9136673807926714,\r\n  },\r\n  {\r\n    x: 1774,\r\n    y: 0.9070394410109283,\r\n  },\r\n  {\r\n    x: 1775,\r\n    y: 0.8805415299293435,\r\n  },\r\n  {\r\n    x: 1776,\r\n    y: 0.6576650944315297,\r\n  },\r\n  {\r\n    x: 1777,\r\n    y: 0.5736692032324731,\r\n  },\r\n  {\r\n    x: 1778,\r\n    y: 0.6019462492771046,\r\n  },\r\n  {\r\n    x: 1779,\r\n    y: 0.6201037301381118,\r\n  },\r\n  {\r\n    x: 1780,\r\n    y: 0.7463262594392124,\r\n  },\r\n  {\r\n    x: 1781,\r\n    y: 0.9433754634064132,\r\n  },\r\n  {\r\n    x: 1782,\r\n    y: 0.49863756227465794,\r\n  },\r\n  {\r\n    x: 1783,\r\n    y: 0.7005973313140103,\r\n  },\r\n  {\r\n    x: 1784,\r\n    y: 0.13915162525781996,\r\n  },\r\n  {\r\n    x: 1785,\r\n    y: 0.5971333435386655,\r\n  },\r\n  {\r\n    x: 1786,\r\n    y: 0.6872274561222385,\r\n  },\r\n  {\r\n    x: 1787,\r\n    y: 0.5526221041603155,\r\n  },\r\n  {\r\n    x: 1788,\r\n    y: 0.7405441608539527,\r\n  },\r\n  {\r\n    x: 1789,\r\n    y: 0.396774792490497,\r\n  },\r\n  {\r\n    x: 1790,\r\n    y: 0.7239586166372067,\r\n  },\r\n  {\r\n    x: 1791,\r\n    y: 0.49375621568337724,\r\n  },\r\n  {\r\n    x: 1792,\r\n    y: 0.576958688359605,\r\n  },\r\n  {\r\n    x: 1793,\r\n    y: 0.4895447904263603,\r\n  },\r\n  {\r\n    x: 1794,\r\n    y: 0.8101109042057207,\r\n  },\r\n  {\r\n    x: 1795,\r\n    y: 0.6967909075546997,\r\n  },\r\n  {\r\n    x: 1796,\r\n    y: 0.5838066706117202,\r\n  },\r\n  {\r\n    x: 1797,\r\n    y: 0.6180534778976521,\r\n  },\r\n  {\r\n    x: 1798,\r\n    y: 0.8302732551008309,\r\n  },\r\n  {\r\n    x: 1799,\r\n    y: 0.7140621551989194,\r\n  },\r\n  {\r\n    x: 1800,\r\n    y: 0.7651034812271482,\r\n  },\r\n  {\r\n    x: 1801,\r\n    y: 0.9623073848612926,\r\n  },\r\n  {\r\n    x: 1802,\r\n    y: 1.1718833932662633,\r\n  },\r\n  {\r\n    x: 1803,\r\n    y: 0.9821090228723915,\r\n  },\r\n  {\r\n    x: 1804,\r\n    y: 1.1008940177190942,\r\n  },\r\n  {\r\n    x: 1805,\r\n    y: 0.8724649678752031,\r\n  },\r\n  {\r\n    x: 1806,\r\n    y: 0.7569201285082208,\r\n  },\r\n  {\r\n    x: 1807,\r\n    y: 1.0792713679422887,\r\n  },\r\n  {\r\n    x: 1808,\r\n    y: 0.9319767229766824,\r\n  },\r\n  {\r\n    x: 1809,\r\n    y: 0.6626722599222193,\r\n  },\r\n  {\r\n    x: 1810,\r\n    y: 0.577021992153452,\r\n  },\r\n  {\r\n    x: 1811,\r\n    y: 0.7505557979703196,\r\n  },\r\n  {\r\n    x: 1812,\r\n    y: 0.41323014968997224,\r\n  },\r\n  {\r\n    x: 1813,\r\n    y: 0.3829739204096523,\r\n  },\r\n  {\r\n    x: 1814,\r\n    y: 0.6176714774657869,\r\n  },\r\n  {\r\n    x: 1815,\r\n    y: 0.6291977295457591,\r\n  },\r\n  {\r\n    x: 1816,\r\n    y: 0.8561777542893472,\r\n  },\r\n  {\r\n    x: 1817,\r\n    y: 0.8444821827963059,\r\n  },\r\n  {\r\n    x: 1818,\r\n    y: 0.6811113202548443,\r\n  },\r\n  {\r\n    x: 1819,\r\n    y: 0.8419562636598121,\r\n  },\r\n  {\r\n    x: 1820,\r\n    y: 0.7916082714890045,\r\n  },\r\n  {\r\n    x: 1821,\r\n    y: 0.7677633201335989,\r\n  },\r\n  {\r\n    x: 1822,\r\n    y: 1.072887908959286,\r\n  },\r\n  {\r\n    x: 1823,\r\n    y: 1.0152721059138186,\r\n  },\r\n  {\r\n    x: 1824,\r\n    y: 0.8982419050453757,\r\n  },\r\n  {\r\n    x: 1825,\r\n    y: 1.184125109753911,\r\n  },\r\n  {\r\n    x: 1826,\r\n    y: 1.1095073896434013,\r\n  },\r\n  {\r\n    x: 1827,\r\n    y: 1.2900069930571625,\r\n  },\r\n  {\r\n    x: 1828,\r\n    y: 1.3264430129310607,\r\n  },\r\n  {\r\n    x: 1829,\r\n    y: 1.1355353468472813,\r\n  },\r\n  {\r\n    x: 1830,\r\n    y: 1.1170098441961802,\r\n  },\r\n  {\r\n    x: 1831,\r\n    y: 1.278996425071434,\r\n  },\r\n  {\r\n    x: 1832,\r\n    y: 0.37152342895613294,\r\n  },\r\n  {\r\n    x: 1833,\r\n    y: 0.7630628789719476,\r\n  },\r\n  {\r\n    x: 1834,\r\n    y: 0.8532493015892693,\r\n  },\r\n  {\r\n    x: 1835,\r\n    y: 0.9776265684586684,\r\n  },\r\n  {\r\n    x: 1836,\r\n    y: 0.8293929412731197,\r\n  },\r\n  {\r\n    x: 1837,\r\n    y: 0.7678554894920517,\r\n  },\r\n  {\r\n    x: 1838,\r\n    y: 0.47517159163103356,\r\n  },\r\n  {\r\n    x: 1839,\r\n    y: 0.8260060287489125,\r\n  },\r\n  {\r\n    x: 1840,\r\n    y: 0.9423537209914508,\r\n  },\r\n  {\r\n    x: 1841,\r\n    y: 1.1676133412234404,\r\n  },\r\n  {\r\n    x: 1842,\r\n    y: 0.9945083521239519,\r\n  },\r\n  {\r\n    x: 1843,\r\n    y: 0.7729315063113643,\r\n  },\r\n  {\r\n    x: 1844,\r\n    y: 0.8957299618253549,\r\n  },\r\n  {\r\n    x: 1845,\r\n    y: 0.8475798439020525,\r\n  },\r\n  {\r\n    x: 1846,\r\n    y: 1.046094118290373,\r\n  },\r\n  {\r\n    x: 1847,\r\n    y: 1.0713747299067755,\r\n  },\r\n  {\r\n    x: 1848,\r\n    y: 1.1497848723450055,\r\n  },\r\n  {\r\n    x: 1849,\r\n    y: 0.9642874396864158,\r\n  },\r\n  {\r\n    x: 1850,\r\n    y: 1.1688539872032482,\r\n  },\r\n  {\r\n    x: 1851,\r\n    y: 1.1349903632228007,\r\n  },\r\n  {\r\n    x: 1852,\r\n    y: 1.3415044803651974,\r\n  },\r\n  {\r\n    x: 1853,\r\n    y: 0.8523820039875005,\r\n  },\r\n  {\r\n    x: 1854,\r\n    y: 0.8892666694138823,\r\n  },\r\n  {\r\n    x: 1855,\r\n    y: 1.0658015984152915,\r\n  },\r\n  {\r\n    x: 1856,\r\n    y: 1.0086442961226547,\r\n  },\r\n  {\r\n    x: 1857,\r\n    y: 0.767351920825605,\r\n  },\r\n  {\r\n    x: 1858,\r\n    y: 0.7787699231632828,\r\n  },\r\n  {\r\n    x: 1859,\r\n    y: 0.9791151672874473,\r\n  },\r\n  {\r\n    x: 1860,\r\n    y: 0.8006866357940546,\r\n  },\r\n  {\r\n    x: 1861,\r\n    y: 1.2222912968050168,\r\n  },\r\n  {\r\n    x: 1862,\r\n    y: 0.9612933141037663,\r\n  },\r\n  {\r\n    x: 1863,\r\n    y: 1.2177573903720615,\r\n  },\r\n  {\r\n    x: 1864,\r\n    y: 0.925756790563447,\r\n  },\r\n  {\r\n    x: 1865,\r\n    y: 1.149795068440331,\r\n  },\r\n  {\r\n    x: 1866,\r\n    y: 0.9928047866485973,\r\n  },\r\n  {\r\n    x: 1867,\r\n    y: 0.7961219852681346,\r\n  },\r\n  {\r\n    x: 1868,\r\n    y: 0.8551081057075303,\r\n  },\r\n  {\r\n    x: 1869,\r\n    y: 1.1934545861902852,\r\n  },\r\n  {\r\n    x: 1870,\r\n    y: 1.0289844951148353,\r\n  },\r\n  {\r\n    x: 1871,\r\n    y: 0.8451424869728213,\r\n  },\r\n  {\r\n    x: 1872,\r\n    y: 0.7426305285966025,\r\n  },\r\n  {\r\n    x: 1873,\r\n    y: 0.8637145254232663,\r\n  },\r\n  {\r\n    x: 1874,\r\n    y: 0.8940260066689639,\r\n  },\r\n  {\r\n    x: 1875,\r\n    y: 0.775225959501585,\r\n  },\r\n  {\r\n    x: 1876,\r\n    y: 0.6727946946347017,\r\n  },\r\n  {\r\n    x: 1877,\r\n    y: 0.19556546917028927,\r\n  },\r\n  {\r\n    x: 1878,\r\n    y: 0.5285369904737202,\r\n  },\r\n  {\r\n    x: 1879,\r\n    y: 0.44968893299435253,\r\n  },\r\n  {\r\n    x: 1880,\r\n    y: 0.6636787811695468,\r\n  },\r\n  {\r\n    x: 1881,\r\n    y: 0.62401133626412,\r\n  },\r\n  {\r\n    x: 1882,\r\n    y: 0.6545021474534147,\r\n  },\r\n  {\r\n    x: 1883,\r\n    y: 0.866042444908109,\r\n  },\r\n  {\r\n    x: 1884,\r\n    y: 0.6963858799341277,\r\n  },\r\n  {\r\n    x: 1885,\r\n    y: 0.577385096394188,\r\n  },\r\n  {\r\n    x: 1886,\r\n    y: 0.612302618224464,\r\n  },\r\n  {\r\n    x: 1887,\r\n    y: 0.5890564409276998,\r\n  },\r\n  {\r\n    x: 1888,\r\n    y: 0.8125904498794336,\r\n  },\r\n  {\r\n    x: 1889,\r\n    y: 1.0197284157633655,\r\n  },\r\n  {\r\n    x: 1890,\r\n    y: 0.8102260110415614,\r\n  },\r\n  {\r\n    x: 1891,\r\n    y: 0.8101724976620016,\r\n  },\r\n  {\r\n    x: 1892,\r\n    y: 1.1617839930897316,\r\n  },\r\n  {\r\n    x: 1893,\r\n    y: 0.8265990114011684,\r\n  },\r\n  {\r\n    x: 1894,\r\n    y: 0.7010397769031252,\r\n  },\r\n  {\r\n    x: 1895,\r\n    y: 0.6638094233855548,\r\n  },\r\n  {\r\n    x: 1896,\r\n    y: 0.8086726853042168,\r\n  },\r\n  {\r\n    x: 1897,\r\n    y: 0.7036094068738462,\r\n  },\r\n  {\r\n    x: 1898,\r\n    y: 1.0878117389054216,\r\n  },\r\n  {\r\n    x: 1899,\r\n    y: 0.8313584116879612,\r\n  },\r\n  {\r\n    x: 1900,\r\n    y: 0.968512087766338,\r\n  },\r\n  {\r\n    x: 1901,\r\n    y: 1.0505691245049709,\r\n  },\r\n  {\r\n    x: 1902,\r\n    y: 1.1408045160551532,\r\n  },\r\n  {\r\n    x: 1903,\r\n    y: 1.20728423987146,\r\n  },\r\n  {\r\n    x: 1904,\r\n    y: 1.0862339790855013,\r\n  },\r\n  {\r\n    x: 1905,\r\n    y: 0.9058247422136022,\r\n  },\r\n  {\r\n    x: 1906,\r\n    y: 1.2121994238462657,\r\n  },\r\n  {\r\n    x: 1907,\r\n    y: 0.9704473626196363,\r\n  },\r\n  {\r\n    x: 1908,\r\n    y: 1.1143689910566,\r\n  },\r\n  {\r\n    x: 1909,\r\n    y: 1.0367674620663936,\r\n  },\r\n  {\r\n    x: 1910,\r\n    y: 1.1690765760987019,\r\n  },\r\n  {\r\n    x: 1911,\r\n    y: 1.058580976570004,\r\n  },\r\n  {\r\n    x: 1912,\r\n    y: 0.9232063661088032,\r\n  },\r\n  {\r\n    x: 1913,\r\n    y: 0.8977771090362995,\r\n  },\r\n  {\r\n    x: 1914,\r\n    y: 0.9394742608573092,\r\n  },\r\n  {\r\n    x: 1915,\r\n    y: 0.6089555725842217,\r\n  },\r\n  {\r\n    x: 1916,\r\n    y: 0.7340040077147397,\r\n  },\r\n  {\r\n    x: 1917,\r\n    y: 0.7371810904334123,\r\n  },\r\n  {\r\n    x: 1918,\r\n    y: 1.1791497120725156,\r\n  },\r\n  {\r\n    x: 1919,\r\n    y: 0.9552820575215193,\r\n  },\r\n  {\r\n    x: 1920,\r\n    y: 0.8187468376517342,\r\n  },\r\n  {\r\n    x: 1921,\r\n    y: 1.0177724930561465,\r\n  },\r\n  {\r\n    x: 1922,\r\n    y: 1.132854419117701,\r\n  },\r\n  {\r\n    x: 1923,\r\n    y: 0.9857470089264395,\r\n  },\r\n  {\r\n    x: 1924,\r\n    y: 1.1751942500337103,\r\n  },\r\n  {\r\n    x: 1925,\r\n    y: 0.8733018649193026,\r\n  },\r\n  {\r\n    x: 1926,\r\n    y: 0.9093355359575581,\r\n  },\r\n  {\r\n    x: 1927,\r\n    y: 1.1784744971380179,\r\n  },\r\n  {\r\n    x: 1928,\r\n    y: 0.9419393818652947,\r\n  },\r\n  {\r\n    x: 1929,\r\n    y: 0.8286466941384765,\r\n  },\r\n  {\r\n    x: 1930,\r\n    y: 0.712951934020476,\r\n  },\r\n  {\r\n    x: 1931,\r\n    y: 0.8940846054815376,\r\n  },\r\n  {\r\n    x: 1932,\r\n    y: 0.8795791650749047,\r\n  },\r\n  {\r\n    x: 1933,\r\n    y: 1.1372199570748092,\r\n  },\r\n  {\r\n    x: 1934,\r\n    y: 0.6527209467896428,\r\n  },\r\n  {\r\n    x: 1935,\r\n    y: 0.8001758746335289,\r\n  },\r\n  {\r\n    x: 1936,\r\n    y: 1.1254113459710813,\r\n  },\r\n  {\r\n    x: 1937,\r\n    y: 1.0531153669181528,\r\n  },\r\n  {\r\n    x: 1938,\r\n    y: 1.2197710912647115,\r\n  },\r\n  {\r\n    x: 1939,\r\n    y: 1.2450225980409158,\r\n  },\r\n  {\r\n    x: 1940,\r\n    y: 1.2991470563415917,\r\n  },\r\n  {\r\n    x: 1941,\r\n    y: 1.0085402179982899,\r\n  },\r\n  {\r\n    x: 1942,\r\n    y: 0.966076659893661,\r\n  },\r\n  {\r\n    x: 1943,\r\n    y: 1.0989472246458414,\r\n  },\r\n  {\r\n    x: 1944,\r\n    y: 1.1063218611627097,\r\n  },\r\n  {\r\n    x: 1945,\r\n    y: 1.2182354588239888,\r\n  },\r\n  {\r\n    x: 1946,\r\n    y: 1.0395864611600085,\r\n  },\r\n  {\r\n    x: 1947,\r\n    y: 0.7491807686348716,\r\n  },\r\n  {\r\n    x: 1948,\r\n    y: 0.9459829098440411,\r\n  },\r\n  {\r\n    x: 1949,\r\n    y: 0.6791544903979837,\r\n  },\r\n  {\r\n    x: 1950,\r\n    y: 0.7421269628288392,\r\n  },\r\n  {\r\n    x: 1951,\r\n    y: 0.7058983103638058,\r\n  },\r\n  {\r\n    x: 1952,\r\n    y: 0.777886368863482,\r\n  },\r\n  {\r\n    x: 1953,\r\n    y: 0.7581466380498728,\r\n  },\r\n  {\r\n    x: 1954,\r\n    y: 0.7298815020850861,\r\n  },\r\n  {\r\n    x: 1955,\r\n    y: 0.7736842827799353,\r\n  },\r\n  {\r\n    x: 1956,\r\n    y: 0.8650020258003798,\r\n  },\r\n  {\r\n    x: 1957,\r\n    y: 1.1272861123544955,\r\n  },\r\n  {\r\n    x: 1958,\r\n    y: 1.2669932844335334,\r\n  },\r\n  {\r\n    x: 1959,\r\n    y: 1.1801825221948459,\r\n  },\r\n  {\r\n    x: 1960,\r\n    y: 1.0891533305176226,\r\n  },\r\n  {\r\n    x: 1961,\r\n    y: 1.1625008112413777,\r\n  },\r\n  {\r\n    x: 1962,\r\n    y: 1.291222935202848,\r\n  },\r\n  {\r\n    x: 1963,\r\n    y: 1.383987356390109,\r\n  },\r\n  {\r\n    x: 1964,\r\n    y: 1.268843160843575,\r\n  },\r\n  {\r\n    x: 1965,\r\n    y: 1.2963129456068947,\r\n  },\r\n  {\r\n    x: 1966,\r\n    y: 1.0624290983837645,\r\n  },\r\n  {\r\n    x: 1967,\r\n    y: 1.0280650983958026,\r\n  },\r\n  {\r\n    x: 1968,\r\n    y: 1.0270997833888973,\r\n  },\r\n  {\r\n    x: 1969,\r\n    y: 1.1213586947125256,\r\n  },\r\n  {\r\n    x: 1970,\r\n    y: 1.382751129451556,\r\n  },\r\n  {\r\n    x: 1971,\r\n    y: 1.0540858007354925,\r\n  },\r\n  {\r\n    x: 1972,\r\n    y: 1.1250136958202752,\r\n  },\r\n  {\r\n    x: 1973,\r\n    y: 1.219438590974582,\r\n  },\r\n  {\r\n    x: 1974,\r\n    y: 0.7893577474794283,\r\n  },\r\n  {\r\n    x: 1975,\r\n    y: 0.8861767765866049,\r\n  },\r\n  {\r\n    x: 1976,\r\n    y: 0.9109691949225595,\r\n  },\r\n  {\r\n    x: 1977,\r\n    y: 1.1445569507755107,\r\n  },\r\n  {\r\n    x: 1978,\r\n    y: 1.0164445365285342,\r\n  },\r\n  {\r\n    x: 1979,\r\n    y: 1.1786276771498838,\r\n  },\r\n  {\r\n    x: 1980,\r\n    y: 0.915321614960068,\r\n  },\r\n  {\r\n    x: 1981,\r\n    y: 0.7730826934165183,\r\n  },\r\n  {\r\n    x: 1982,\r\n    y: 1.4217562361727605,\r\n  },\r\n  {\r\n    x: 1983,\r\n    y: 1.2562880976530832,\r\n  },\r\n  {\r\n    x: 1984,\r\n    y: 1.4344525799286874,\r\n  },\r\n  {\r\n    x: 1985,\r\n    y: 1.3416320735482803,\r\n  },\r\n  {\r\n    x: 1986,\r\n    y: 1.3728120324717705,\r\n  },\r\n  {\r\n    x: 1987,\r\n    y: 0.993682156167492,\r\n  },\r\n  {\r\n    x: 1988,\r\n    y: 1.1875694814246753,\r\n  },\r\n  {\r\n    x: 1989,\r\n    y: 1.2752585229679054,\r\n  },\r\n  {\r\n    x: 1990,\r\n    y: 1.2828792633685056,\r\n  },\r\n  {\r\n    x: 1991,\r\n    y: 1.5971999600466786,\r\n  },\r\n  {\r\n    x: 1992,\r\n    y: 1.484979707203353,\r\n  },\r\n  {\r\n    x: 1993,\r\n    y: 1.0301981245200442,\r\n  },\r\n  {\r\n    x: 1994,\r\n    y: 1.096423240371182,\r\n  },\r\n  {\r\n    x: 1995,\r\n    y: 1.0533346843023579,\r\n  },\r\n  {\r\n    x: 1996,\r\n    y: 1.2261090307412073,\r\n  },\r\n  {\r\n    x: 1997,\r\n    y: 1.0484541242213714,\r\n  },\r\n];\r\n\r\nexport default data;\r\n","const __INIT__ = \"__INIT__\";\n\nexport function createStore(rootReducer) {\n  let state = rootReducer(undefined, { type: __INIT__ });\n  let listeners = [];\n  return {\n    getState: () => state,\n\n    dispatch: (action) => {\n      state = rootReducer(state, action);\n      // trigger any listeners\n      listeners.forEach((listener) => listener(state));\n    },\n\n    subscribe: (listener) => {\n      listeners = [...listeners, listener];\n      return function unsubscribe() {\n        // remove this listener from listeners\n        listeners = listeners.filter((l) => l !== listener);\n      };\n    },\n  };\n}\n","/* global: Plotly */\n\n// import Plotly from \"plotly.js-dist\";\n\n/**\n * Track previous renders so that we can use\n * Plotly's react method to update rather can replotting\n * completely new graphs.\n **/\nconst previousRenders = {};\nconst hasPreviouslyRendered = (plotId) => !!previousRenders[plotId];\nconst recordRender = (plotId) => (previousRenders[plotId] = true);\n\n/**\n * renders a new plot if this is our first\n * or uses Plotly.react to update if we've have previously\n * rendered this plotId.\n */\nfunction renderPlot(plotId, traces) {\n  if (hasPreviouslyRendered(plotId)) {\n    return Plotly.react(plotId, traces);\n  }\n  Plotly.newPlot(plotId, traces);\n  recordRender(plotId);\n}\n\n/**\n * converts a collection of points {x, y}\n * to a plotlyJS trace\n */\nfunction pointsToPlotlyTrace(\n  collectionOfPoints,\n  { type = \"scatter\", mode = \"markers\", ...plotlyOpts } = {}\n) {\n  return {\n    x: collectionOfPoints.map((pt) => pt.x),\n    y: collectionOfPoints.map((pt) => pt.y),\n    type,\n    mode,\n    ...plotlyOpts,\n  };\n}\n\n/**\n * given an dictionary of data sets, convert them\n * all to plotly traces\n * @param {Object.<string, Point[]>} dataSetDict\n */\nfunction toTraces(dataSetDict) {\n  return Object.keys(dataSetDict).map((key) =>\n    pointsToPlotlyTrace(dataSetDict[key], { name: key })\n  );\n}\n\n/**\n * plots a dictionary of data sets\n *\n * @param {Object.<string, Point[]>} dataSets - dictionary of datasets\n * The keyname will the name assigned to the trace.\n * @param {string} plotId - id of the html element to use for plotting\n */\nexport default function plot(dataSetDict, plotId = \"plot\") {\n  const traces = toTraces(dataSetDict);\n  renderPlot(plotId, traces);\n}\n","import store, { INPUT_CHANGE } from \"../store/store.js\";\n\nexport default function handleInputChange(event) {\n  const sliderValue = Number.parseInt(event.target.value);\n  // scaling lambda based on slider\n  const newLambda = 0.00001 * 2 ** sliderValue;\n  store.dispatch({\n    type: INPUT_CHANGE,\n    payload: newLambda,\n  });\n}\n","// Comment this next line out if using simpleSmoothingSpline\n// from a CDN. See the index.html file.\nimport simpleSmoothingSpline from \"../src/index.ts\";\nimport store from \"./store/store.js\";\nimport plot from \"./helpers/plot.js\";\nimport getAllData from \"./helpers/getAllData.js\";\nimport handleInputChange from \"./helpers/handleInputChange.js\";\nimport onReady from \"./helpers/onReady.js\";\n\nconst PLOT_ID = \"plot\";\n\n// render function will run every time the state of the application changes\n// that is, if the slider is adjusted or more data is added.\nasync function render(state) {\n  // update lambda to match the state value\n  document.querySelector(\"#lambda-value\").textContent = state.lambda;\n\n  // get points for the spline\n  const data = getAllData(state);\n\n  const smoothSpline = await simpleSmoothingSpline(data, {\n    lambda: state.lambda,\n  });\n\n  const cubicSpline = await simpleSmoothingSpline(data, { type: \"cubic\" });\n\n  // render plot with data and smoothing spline points\n  plot(\n    {\n      ...state.data,\n      \"smooth spline\": smoothSpline.points,\n      \"cubic spline\": cubicSpline.points,\n    },\n    PLOT_ID\n  );\n}\n\n// wait until the page is loaded, then...\nonReady(() => {\n  // This is what makes the render function run every time the state changes.\n  store.subscribe(render);\n\n  // listen for any changes to the slider on the page which controls\n  // the lambda (smoothness) tuning variable\n  document\n    .querySelector(\"#smoothness\")\n    .addEventListener(\"change\", handleInputChange);\n\n  // get the initial state of the app (see the store.js) and render the screen\n  render(store.getState());\n});\n","// gets all data from the current state\nexport default function getAllData(state) {\n  return Object.keys(state.data).reduce(\n    (acc, key) => [...acc, ...state.data[key]],\n    []\n  );\n}\n","// wait for document ready\nconst onReady = (fn) =>\n  document.readyState !== \"loading\"\n    ? fn()\n    : document.addEventListener(\"DOMContentLoaded\", fn);\n\nexport default onReady;\n"],"names":["relList","document","createElement","supports","link","querySelectorAll","MutationObserver","mutations","mutation","type","node","addedNodes","tagName","rel","observe","childList","subtree","ep","fetchOpts","script","integrity","referrerpolicy","referrerPolicy","crossorigin","credentials","getFetchOpts","href","p","getAllXs","pts","map","pt","x","create2DArray","rows","cols","initialValue","arr","i","row","j","push","M","get","constructor","data2","numCols","_data","Array","isArray","length","eigen","Matrix","eigenMatrixToArray","_eigenMatrix","this","Error","ready","_svd","_svdIsDirty","_getEigenMatrix","Decompositions","svd","col","set","value","fn","transpose","det","useSVD","inverse","U","sv","V","_getSVD","Ut","sigmaVector","flat","sigmaInvVector","sigma","sigmaInverseMatrix","setBlock","diagonal","Ainv","matMul","vector","columns","diag","matrix","N","scalar","mul","matAdd","size","ident","Promise","resolve","zeros","toArray","solve","GC","flush","createBasisArray","x_k","pos","val","Math","max","getAllYs","y","lambda","X","async","all","createBasisMatrix","toSVD","innerInverse","s","s2pluslambda","innerInv","Utrans","S","betas","multiply","then","res","_flushMemory","splineFn","xs","ys","basisMatrix","transposedBasisMatrix","Y","basis","reduce","acc","beta","generateCubicSplineFunction","InvalidLambdaError","solveForBetas","generateSmoothingSplineFunction","splinePoints","minX","min","stepSize","keys","generateSplinePoints","points","shim","initialState","data","store","rootReducer2","state","listeners","getState","dispatch","action","forEach","listener","subscribe","filter","l","createStore","__spreadProps","payload","previousRenders","plotId","traces","hasPreviouslyRendered","Plotly","react","newPlot","collectionOfPoints","_a","mode","_b","plotlyOpts","__spreadValues","dataSetDict","Object","key","pointsToPlotlyTrace","name","toTraces","event","newLambda","Number","parseInt","target","querySelector","textContent","getAllData","smoothSpline","simpleSmoothingSpline","cubicSpline","render","addEventListener","handleInputChange","readyState"],"mappings":"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G,kBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,kBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,kBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,kBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,kBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,kBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,kBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,GAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,kBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,kBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,kBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,kBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,kBAEL,CACE7E,EAAG,KACH6E,EAAG,kBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,kBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,kBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,kBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,GAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,gBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,kBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,kBAEL,CACE7E,EAAG,KACH6E,EAAG,kBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,iBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,kBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,kBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,kBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,kBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,kBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,kBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,iBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,kBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,kBAEL,CACE7E,EAAG,KACH6E,EAAG,kBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,kBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,kBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,iBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,kBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,kBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,kBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,mBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,oBAEL,CACE7E,EAAG,KACH6E,EAAG,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"}